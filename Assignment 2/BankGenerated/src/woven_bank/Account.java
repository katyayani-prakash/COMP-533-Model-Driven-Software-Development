package woven_bank;

import java.util.Iterator;
import java.util.LinkedList;
import java.io.File;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected boolean loggingToConsoleEnabled;
    protected boolean loggingToFileEnabled;
    protected Customer owner;
    protected LinkedList<Logger> loggers;
    
    public Account(int initialBalance, Customer owner) {
        this.loggers = new LinkedList<>();
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        enableConsoleLogging();
        ConsoleLogger consoleLogger = new ConsoleLogger(this);
        loggers.add(consoleLogger);
    }

    public void deposit(int amount) {
        this.balanceInCents = balanceInCents + amount;
        String methodName = new Object() {}.getClass().getEnclosingMethod().getName();
        String message = methodName + " has executed on object " + this;
        Iterator<Logger> loggersIterator = loggers.iterator();
        while (loggersIterator.hasNext()) {
            Logger logger = loggersIterator.next();
            try {
                logger.log(message);
            } catch (Exception exception) {
                System.err.println("Failed to log operation execution");
            }
        }
    }

    public void withdraw(int amount) {
        long startTime = currentTime();
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughFundsException nefException = new NotEnoughFundsException();
            boolean isLoggingToFileEnabled = isLoggingToFileEnabled();
            if (!isLoggingToFileEnabled) {
                Customer owner = getOwner();
                String customerName = owner.getName();
                String fileName = "Account of " + customerName + ".txt";
                File file = new File(fileName);
                FileLogger filelogger = new FileLogger(this, file);
                addLoggers(filelogger);
                enableFileLogging();
            }
            throw nefException;
        }
        long endTime = currentTime();
        Iterator<Logger> loggersIterator = loggers.iterator();
        while (loggersIterator.hasNext()) {
            Logger logger = loggersIterator.next();
            long executionTime = endTime - startTime;
            String methodName = new Object() {}.getClass().getEnclosingMethod().getName();
            String message = methodName + " has executed on object " + this + " in " + executionTime + " ns";
            try {
                logger.log(message);
            } catch (Exception exception) {
                System.err.println("Failed to log operation execution");
            }
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }

    void enableConsoleLogging() {
        this.loggingToConsoleEnabled = true;
    }

    void disableConsoleLogging() {
        this.loggingToConsoleEnabled = false;
    }

    boolean isConsoleLoggingEnabled() {
        return this.loggingToConsoleEnabled;
    }

    Logger getFirstLoggers() {
        Logger first = loggers.getFirst();
        return first;
    }

    Logger getLastLoggers() {
        Logger last = loggers.getLast();
        return last;
    }

    boolean addLoggersAt(int index, Logger a) {
        loggers.add(index, a);
        return true;
    }

    boolean removeLoggersAt(int index) {
        Logger removedElement = loggers.remove(index);
        boolean result = removedElement != null;
        return result;
    }

    Logger getLoggersAt(int index) {
        Logger associated = loggers.get(index);
        return associated;
    }

    boolean addLoggers(Logger a) {
        boolean added = loggers.add(a);
        return added;
    }

    boolean removeLoggers(Logger a) {
        boolean removed = loggers.remove(a);
        return removed;
    }

    Account() {
        LinkedList<Logger> collection = new LinkedList<Logger>();
    }

    boolean containsLoggers(Logger a) {
        boolean contains = loggers.contains(a);
        return contains;
    }

    int sizeOfLoggers() {
        int size = loggers.size();
        return size;
    }

    LinkedList<Logger> getLoggers() {
        return this.loggers;
    }

    void enableFileLogging() {
        this.loggingToFileEnabled = true;
    }

    void disableFileLogging() {
        this.loggingToFileEnabled = false;
    }

    boolean isLoggingToFileEnabled() {
        return this.loggingToFileEnabled;
    }

    long currentTime() {
        long currentTime = System.nanoTime();
        return currentTime;
    }
}
